knitr::opts_chunk$set(echo = TRUE)
library(haven); library(dplyr); library(randomForest)
state_data <- as.data.frame(read_stata("state_data.dta"))
state_data <- state_data[complete.cases(state_data),]
state_data$state <- NULL
options(scipen=10)
total_crime <- with(state_data, rmurd + rrape + rrobb + raggr +
rburg + rlarc + rauto)
total_crime_quint <- as.factor(ntile(total_crime, 5))
state_data$crime_top20 <- ifelse(total_crime_quint==5, 1, 0)
summary(state_data$crime_top20)
state_data_new <- data.frame(state_data[,-(1:7)])
lpm<-lm(crime_top20 ~ poverty + gini + top_1 + urate + avwage + inc_rate,
data=state_data_new)
summary(lpm)
lpm_pred <- ifelse(lpm$fitted.values>=0.50, 1, 0)
table(state_data_new$crime_top20, lpm_pred)
logit <- glm(crime_top20 ~ poverty + gini + top_1 + urate + avwage + inc_rate,
data=state_data_new, family=binomial(link="logit"))
summary(logit)
View(state_data)
logit_pred <- ifelse(logit$fitted.values>=0.50, 1, 0)
table(state_data_new$crime_top20, logit_pred)
samp_size<-(0.75*nrow(state_data_new))
train_obs<-sample(seq_len(nrow(state_data_new)), size=samp_size)
train<-state_data_new[train_obs,]
test<-state_data_new[-train_obs,]
rf<-randomForest(as.factor(crime_top20)~., data=train, importance=TRUE,
proximity=FALSE, ntree=250)
rf
varImpPlot(rf, main="Variable Importance Plot")
rf_test <- predict(rf, test)
table(test$crime_top20, rf_test)
